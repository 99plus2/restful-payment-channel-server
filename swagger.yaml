swagger: '2.0'

info:
  version: "2.0.0"
  title: RESTful Bitcoin payment channel protocol
  description: |
    A Bitcoin payment channel enables instant, secure & fee-less transfer of bitcoins from one party to another. The intended use is consumer-to-merchant payments, allowing a consumer to make many small payments to a merchant - with whom the consumer has an open payment channel - while only paying the Bitcoin transaction fee once, when the channel is closed.
    
    The payment server speaking this protocol is the recipient of value, operating on behalf of a content delivery server who receives value from a customer/client. The content delivery server passes requests supplied by the client (payer) to the payment server, and delivers content to the client dependent on the response from the payment server. 
    
    * Server implementation: https://github.com/runeksvendsen/restful-payment-channel-server
    * Client library: https://github.com/runeksvendsen/paychanjs-client
    
    Changes from version 1 to 2:
      * The outpoint that the payment transaction redeems is now no longer static, but will change when the server needs to free the value it has received over the channel. This enables the server to make use of the value it has received without closing the payment channel. If a client attempts to make a payment over a channel whose source of funding has changed, it will receive a "301 Moved" response, and the payment must now use the funding outpoint specified by the new location URL.
      * Use channel funding address as the client change address and, if the client wishes to close the channel early, have it create a new payment, with the desired change address, for this purpose. Rationale: the client needs to contact the server in order to close the payment channel anyway. When doing this, it might as well supply a payment that uses the desired change address, thus enabling the server to redeem the value it has received over the channel while continuing to accept payments it. It also gives the client flexibility to decide which change address to use when it actually needs it, rather than when the channel is opened.
      * A Payment now contains all the information needed to create and verify the client payment signature
    
    
host: paychantest.runeks.me #Bitcoin testnet server
basePath: /v2
schemes:
  - https

paths:
  /funding/{client_pubkey}/{exp_time}/info:
    get:
      summary: Retrieve information about how to fund a new payment channel
      description: |
        Before opening a payment channel with the server, the client must first acquire the server public key, in order to calculate a funding address for the channel.
      
        The client will first calculate the funding address, confirm that it matches the server's, then pay to the funding address, and wait until the funding transaction has the server-specified number of confirmations ("funding_tx_min_conf").
        
        After this, the client will create a new payment of value equal to the server-specified channel open price ("open_price"), and POST this to the channel-open URL in order to open the channel.
      operationId: getFundingInfo
      parameters:
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
      responses:
        200:
          description: Proceed with funding
          schema:
            $ref: "#/definitions/FundingInfo"
        400:
          description: Invalid parameter
  /funding/{client_pubkey}/{exp_time}/begin_open:
    get:
      summary: Get payment channel resource URI
      description: After sending funds to the channel funding address, and waiting the specified number of confirmations, the client will retrieve the resource URI of not-yet-open payment channel here, and POST the first channel payment to 'channel_uri' in order to open the channel.
      operationId: fundingBeginOpen
      parameters:
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
      responses:
        200:
          description: Channel ready to open
          schema:
            $ref: "#/definitions/ChannelLocation"
        400:
          description: Invalid parameter
        409:
          description: Insufficient confirmation count for funding transaction
  /channels/{client_pubkey}/{exp_time}/{funding_txid}/{funding_vout}:
    post:
      summary: Create a new payment channel
      description: |
        After publishing the funding Bitcoin transaction, and waiting for the specified number of confirmations, the client will POST a payment, paying the server's specified channel open price, to this URL. Subsequent channel payments will be PUT on this same URL.
        
      operationId: createPaymentChannel
      parameters:
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
        - $ref: "#/parameters/fundingSourceTxIdParam"
        - $ref: "#/parameters/fundingSourceVoutParam"
        - $ref: "#/parameters/paymentBodyParam"
      responses:
        201:
          description: Channel created
          schema:
            $ref: "#/definitions/PaymentResult"
          headers:
            Location:
              description: "URL of the newly opened channel"
              type: string
              format: uri
        409:
          description: Channel already exists
          headers:
            Location:
                description: "URL of the already open channel"
                type: string
                format: uri
        400:
          description: Invalid parameter
    put:
      summary: Make channel payment
      description: |
        Make payment over an existing payment channel.
        
        The payment comprises a signature over a predefined Bitcoin transaction template
      operationId: payPaymentChannel
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
        - $ref: "#/parameters/fundingSourceTxIdParam"
        - $ref: "#/parameters/fundingSourceVoutParam"
        - $ref: "#/parameters/paymentBodyParam"
      responses:
        200:
          description: Value received
          schema:
            $ref: "#/definitions/PaymentResult"
        310:
          description: Payment 1/2 accepted. However, it is required that the client also perform a request on the payment resource pointed to (same as 307 but request data needs to be updated).
          headers:
            Location:
              description: "Location of payment resource also requiring payment data"
              type: string
              format: uri
        311:
          description: The payment resource has moved permanently. Perform the payment request on the specified resource instead (same as 308 but request data needs to be updated).
          headers:
            Location:
              description: "New payment resource location"
              type: string
              format: uri
        400:
          description: Invalid parameter
        410:
          description: The channel is in the process of being closed. Performing a DELETE request on the resource in a few seconds should return information about the closed channel.
    delete:
      summary: Delete an existing payment channel
      description: In order to enable the server to return change to the client, the client must create a new payment with the desired change address, and supply this pay as well as the change address in the appropriate query parameters.
      operationId: deletePaymentChannel
      parameters:
        # path
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
        - $ref: "#/parameters/fundingSourceTxIdParam"
        - $ref: "#/parameters/fundingSourceVoutParam"
        # body
        - $ref: "#/parameters/paymentBodyParam"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Channel closed, funds settled. The settling transaction has been published to the Bitcoin network.
          schema:
            $ref: "#/definitions/PaymentResult"
        400:
          description: Invalid parameter
          
parameters:
    expTimeParam:
      name: exp_time
      in: path
      description: Expiration date/time for the channel (Unix timestamp)
      required: true
      type: integer
      format: uint32
    clientPubKeyParam:
      name: client_pubkey
      in: path
      description: Client/value sender public key. Hex-encoded, compressed Secp256k1 pubkey, 33 bytes.
      required: true
      type: string
    fundingSourceTxIdParam:
      name: funding_txid
      in: path
      description: The Bitcoin transaction ID part of the outpoint in the Blockchain which holds the client's channel balance.
      type: string
      required: true
    fundingSourceVoutParam:
      name: funding_vout
      in: path
      description: The output index part of the outpoint in the Blockchain which holds the client's channel balance.
      type: integer
      required: true
    paymentBodyParam:
      name: payment_data
      in: body
      description: Payment data
      required: true
      schema:
        $ref: "#/definitions/PaymentData"
      
definitions:
  ChannelLocation:
    type: object
    required:
      - channel_uri
    properties:
      channel_uri:
        description: The URL of the resource which must the POSTed to in order to open a new payment channel, after which further payments can be PUT on this resource. Close the payment channel by issuing a DELETE request on the resource.
        type: string
        example: |
          https://paychan.runeks.me/v2/channels/03da3afe4f58992a8cc909522c2ec859ef218fd92fda0a67c23fb40e0303030405/1502183072/a615e0fa211f5644b0262489790151b5104c085ce84c80a265af4475b5c6c8da/2

  FundingInfo:
    type: object
    required:
      - server_pubkey
      - dust_limit
      - funding_address_copy
      - redeem_script_copy
      - open_price
      - funding_tx_min_conf
      - settlement_period_hours
      - min_duration_hours
    properties:
      server_pubkey:
        description: Server/value receiver public key. Hex-encoded, compressed Secp256k1 pubkey, 33 bytes.
        type: string
        example: 029b5549e8cac42d27051956925d8176408b2183ba357850f58320ad5876b9c13f
      dust_limit:
        description: (Satoshis) The server will not accept payments where the client change amount is less than this amount. This "dust limit" is necessary in order to avoid producing a settlement transaction that will not circulate in the Bitcoin P2P network because it contains an output of minuscule value. Consequently, the maximum amount, that can be sent over the payment channel, is the amount sent to the funding address minus this "dust limit".
        type: integer
        format: uint64
      funding_address_copy:
        description: Server derived channel funding address. The client will confirm that its own derived funding address matches this one, before paying to it.
        type: string
        example: 2NCTirSGjFM8T7hUow3AcfyFaw1N1APnYuP
      redeem_script_copy:
        description: Server derived channel redeem script. Defines sender, receiver and channel expiration date. Used to construct the input in the payment transaction. The client will also verify that this matches what it expects. Hex-encoded.
        type: string
        example: "010344... (xx bytes)"
      open_price:
        description: Price (in satoshis) for opening a channel with the given {exp_time}. This amount is paid in the initial channel payment when creating a new channel. May be zero, in which case a payment of zero value is transferred, ensuring that the channel can be closed at any time.
        type: integer
        format: uint64
        minimum: 0
        example: 25000
      funding_tx_min_conf:
        description: Minimum confirmation count that the funding transaction must have before proceeding with opening a new channel.
        type: integer
        format: int32
        minimum: 0
        example: 6
      settlement_period_hours:
        description: The server reserves the right to close the payment channel this many hours before the specified expiration date. The server hasn't received any actual value until it publishes a payment transaction to the Bitcoin network, so it needs a window of time in which the client can no longer send payments over the channel, and yet the channel refund transaction hasn't become valid. 
        type: integer
        minimum: 0
        example: 12
      min_duration_hours:
        description: The minimum duration of newly opened payment channels. 
        type: integer
        minimum: 0
        example: 48
  
  PaymentData:
    description: Contains information about a payment. A payment contains a signature over a hash of a Bitcoin transaction which redeems the outpoint pointed to by the resource's 'funding_txid' and 'funding_vout' parameters.
    type: object
    required:
      - funding_txid
      - funding_vout
      - signature_data
      - change_value
      - change_address
      - redeem_script
      - sighash_flag
    properties:
      redeem_script:
        description: The funds sent to the funding address are bound by this contract (Bitcoin script). The data is needed to construct the payment signature. Hex-encoded data.
        type: string
        example: "TODO"
      funding_txid:
        description: The transaction ID of the Bitcoin transaction paying to the channel funding address.
        type: string
        example: "88173df15ec17490288cabaa9a0becfdef3614d9526eec16f670886d7d229301"
      funding_vout:
        description: The output index/"vout" of the output (in the transaction) payingto the channel funding address.
        type: integer
        format: uint32
        example: 1
      signature_data:
        description: |
          DER-encoded ECDSA signature (in hex). This is a SIGHASH_SINGLE|ANYONECANPAY signature over the the "payment transaction", which is a Bitcoin transaction that: redeems the outpoint specified by 'funding_txid' and 'funding_vout' using the redeem script defined in 'redeem_script', with an output which sends 'change_value' to 'change_address'.
        type: string
        example: "304402202... (71-72 bytes ending in 0x83)"
      change_value:
        description: The value sent back to the client in the payment transaction. The total amount transferred to the server is this amount subtracted from the value sent to the channel funding address.
        type: integer
        format: uint64
        example: 1000000
      change_address:
        description: The client change address as used in the only output of the payment transaction.
        type: string
        example: "19xUUsSomTCbS9Ar3m1e6j3zqGBANz6d6t"
      sighash_flag:
        description: Used to construct the payment signature. Defines which parts of a Bitcoin transaction are signed. Single byte; in both v1 and v2 always equal to 0x83 (131) (SIGHASH_SINGLE|ANYONECANPAY).
        type: integer
        format: uint8
        example: 131
  PaymentResult:
    type: object
    required:
      - channel_status
      - channel_value_left
      - value_received
      - settlement_txid
    properties:
      channel_status:
        description: Equal to "open" if the channel is still open, otherwise "closed". The channel is automatically closed when there is no value left to send. If a payment sends all remaining channel value to the server, the server will close the channel and set this field to "closed".
        type: string
        example: "open"
      channel_value_left:
        description: Remaining channel value. This is the amount that the client/sender would receive if the channel was closed now.
        type: integer
        minimum: 0
        example: 1700000
      value_received:
        description: Value of the payment that was just received. This is the additional value assigned to the receiver/server with this payment.
        type: integer
        minimum: 0
        example: 1000
      settlement_txid:
        description: |
          If channel_status equals "closed": the transaction ID of the Bitcoin transaction which settles the channel; otherwise null.
        type: string
        example: "4d2c20ea63729a8f248904faf585bd52dc9bd52c59ea36b0c6cea5e425f0c4e9"
        